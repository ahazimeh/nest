in the service:
import { Repository } from 'typeorm';
import { InjectRepository } from "@nestjs/typeorm"
constructor(@InjectRepository(User) private repo: Repository<User>) {
}

for typeorm we first use create then save because we could use validation inside of the entity instead of the dto
or we can log users that are inserted for example
@AfterInsert()
    logInsert() {
        console.log('Inserted User with id', this.id)
    }
if we save an entity instance then all the hooks will be executed
but if we passed in an object and tried to save it then no hooks will be executed

insert, update, and delete don't call hooks whereas save and delete do

attrs: Partial<User> // it has some or no properties from the user object
Update User:
const user = await this.findOne(id);
        if(!user) {
            throw new Error('User not found');
        }
        Object.assign(user, attrs);
        return this.repo.save(user)

***throwing notfounndexceptions in the service will flow back to the users controller which
communicates over http
nest itself is designed assuming that you handle communication protocols besides http requests
for example we might have another controller designed to handle websocket traffic or grpc requests
notfound exceptions are not compatible with any other kind of communication protocols
the solution is to implement your own exception filters 