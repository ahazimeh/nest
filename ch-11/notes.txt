import { randomBytes, scrypt as _scrypt } from "crypto";
import { promisify } from "util";

const scrypt = promisify(_scrypt)


async signUp(email: string, password: string) {
    // see if email is in use
    const users = await this.usersService.find(email)
    if(users.length) {
        throw new BadRequestException('email in use')
    }

    // hash the users password
    // Generate a salt
    const salt = randomBytes(8).toString('hex')
    // Hash the salt and the password together
    const hash = (await scrypt(password, salt, 32)) as Buffer
    // Join the hashed result and the salt together
    const result = salt+'.'+hash.toString('hex')

    // create a new user and save it
    const user = await this.usersService.create(email, result)

    // return the user
    return user;
}

async signIn(email: string, password: string) {
    const [user] = await this.usersService.find(email);
    if(!user) {
        throw new NotFoundException('user not found')
    }

    const [salt, storedHash] = user.password.split('.')

    const hash = (await scrypt(password, salt, 32)) as Buffer;

    if(storedHash !== hash.toString('hex')) {
        throw new BadRequestException('bad password')
    }
    return user;
}


npm i cookie-session @types/cookie-session
app.use(cookieSession({
    keys: ['sdgfdghsdgs']
}))

@Get('/colors/:color')
setColor(@Param('color') color: string, @Session() session: any) {
    session.color = color;
}

@Get('/colors')
getColor(@Session() session: any) {
    return session.color
}

how to use interceptor that is making use of dependency injection
method1:
    first add the interceptor to the module providers that is being used
    then go to the controller you want to run the interceptor in
        @UseInterceptors(CurrentUserInterceptor)
method2:global interceptor
    in the module provider that is making use of di
    {
        provide: APP_INTERCEPTOR,
        useClass: CurrentUserInterceptor
    }
    // note that the only downside is that we are fetching this object for places we don't need

    Guard:
    @UseGuards(AuthGuard)
